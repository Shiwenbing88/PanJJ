查看表结构
desc imfr_ut_qa00007 ;
增加表字段
alter table IMFR_UT_QA00007 add (IMFR_UD_IT_C0018 varchar(32));
重新定义表字段
alter table IMFR_UT_QA00007 modify (IMFR_UD_IT_C0018 varchar(64));
删除表字段
alter table IMFR_UT_QA00007 drop column IMFR_UD_IT_C0018 ;
重新命名表字段
alter table IMFR_UT_QA00007 rename column IMFR_UD_IT_C0018 to  bb ;
超级用户连数据库
sqlplus sys/test(password) as sysdba;
删除用户
drop user user_name cascade;
select segment_name from dba_segments where bytes >= 100000000;
select TABLE_NAME FROM USER_LOBS WHERE segment_name = 'SYS_LOB0000159098C00005$$';
select * from IMW_T_ACTV_XML_FLOW;
select SUM(DBMS_LOB.getlength(DATA)) / 1024 / 1024 / 1024 as data_len from IMW_T_ACTV_XML_FLOW order by data_len desc;
DBMS_LOB.getlength(DATA) 判断数据二进制的长度
JavaScript 语言特殊之处在于,函数内部可以直接读取全局变量;
var n=999;function f1(){console.log(n)};f1();//999
另外一方面,函数外部无法读取函数内的局部变量;
function f1(){var n=999;}f1();console.log(n);//error
注意:函数内部声明变量时，一定要使用var命令。如果不用的话,你实际上申明了一个全局变量;
function f1(){n=999;}f1();console.log(n);//999
闭包的概念：
由于在JavaScript语言中,只有函数内部的子函数才能读取局部变量,因此可以把闭包简单理解成“定义在函数内部的函数”。
所以在本质上,闭包就是将函数的内部和函数外部连接起来的桥梁。
通俗的理解：JavaScript中所有的function都是一个闭包。不过一般来说,嵌套的function所产生的闭包更为强大。这也是我们所称为的闭包。
闭包的用途：
1.可以读取函数内部的变量
以下f2函数就是一个闭包
function f1(){var n=999;function f2(){n+=1;console.log(n);}return f2;} var result=f1();result();
2.让这些变量的值始终保持在内存中
function f1(){var n=999;nAdd=function(){n+=1};function f2(){console.log(n)};return f2;} 
var result = f1(); 
result(); //999
nAdd(); 
result();//1000
原因:在这段带代码中,result实际上就是闭包f2函数,他一共运行了两次,第一次时值是999,第二次值是1000,这就说明变量n一直存在内存中.
主要原因是f1是f2的父函数,而f2被赋予了一个全局变量n;
1.Ajax能够实现异步传输,所依赖的就是JavaScript中的XMLHttpRequest对象。
2.XMLHttpRequest对象是XMLHttp组建的对象，它是一个抽象的对象，允许脚本从服务器返回的数据或者将数据发送到服务器。
3.XMLHttpRequest可以实现客户端与服务器只进行数据层面的交互，不必每次刷新页面。
4.XMLHttpRequest最早在IE 5.0中作为一个ActiveX控件提供，后被广泛运用。
5.在使用XMLHttpRequest发送前求和处理相应之前需要先创建一个XMLHttpRequest。
netstat -ano
netstat -aon|findstr "8080"
tasklist|findstr "pid"
taskkill /f /t/ /im javaw.exe
//create caList table 
		function createListGroup(userDataId, id, pagerId) {
			jQuery("#" + id).jqGrid({
				url: 'murata/im/global/qa00005/qa00005_getCaData/getList',
				postData: { userDataId: userDataId},
				datatype: "json",
				colNames :['No.' , 'リンク' , '件名' , '期限' , '担当' , '進捗' , '効果の確認' , '判定'],
				colModel:[	{name : 'col0' , index : 'col0' , width:40},
							{name : 'col1' , index : 'col1'},
							{name : 'col2' , index : 'col2'},
							{name : 'col3' , index : 'col3'},
							{name : 'col4' , index : 'col4'},
							{name : 'col5' , index : 'col5'},
							{name : 'col6' , index : 'col6'},
							{name : 'col7' , index : 'col7'}
				],                           
// 				rowNum:10,
// 				rowList:[10,20,30],
// 				pager: '#' + pagerId,
				sortname: 'col1',
				viewrecords: true,
				sortorder: "asc",
				forceFit: true,
				shrinkToFit:true,
				jsonReader : {
					root: "rows",
// 					page: "page",
// 					total: "total",
// 					records: "records",
					repeatitems: false
				},
				height: 'auto',
				width : $("div .imui-form-container").width()-20
			});
			jQuery("#" + id).jqGrid('navGrid','#' + pagerId,{edit:false,add:false,del:false,search:false,refresh:true});
		};
    
    var logger = Logger.getLogger();
var localeId = Contexts.getAccountContext().locale;
function getList(request) {
	var res2  = new TenantDatabase().executeByTemplate('murata/im/global/qa00005/sql/qa00005_select_cadata', {
		qa08Gt02UserId : DbParameter.string(request.userDataId)
	});
	var	arrCa = new Array();
	var qa08SysMaId ='';
	var appId ='qa00008';
	for(var j=0;j<res2.countRow;j++){
		var jsonTemp ={};
		//NO.
		jsonTemp['col0'] = res2.data[j].qt_n0013;
		//Link
		qa08SysMaId = res2.data[j].qt_c0074;
		jsonTemp['col1'] = "<a href='javascript:void(0);' onclick=\"openLink('"+qa08SysMaId+"','"+appId+"')\">link</a>";
		//件名
		jsonTemp['col2'] = res2.data[j].qt_c0003;
		//期限
		jsonTemp['col3'] = res2.data[j].qt_d0026;
		//担当
		jsonTemp['col4'] = res2.data[j].qt_c0269;
		//効果の確認
		jsonTemp['col6'] = res2.data[j].qt_c0062;
		//判定
		jsonTemp['col7'] = res2.data[j].qt_c0252;
		arrCa.push(jsonTemp);
	}
	var page = request.page == undefined ? 1 : request.page;
	var rows = request.rows == undefined ? 10 : request.rows;
	var sord = request.sord == undefined ? 'asc' : request.sord;
	var sidx = request.sidx == undefined ? 'col0' : request.sidx;

	arrCa.sort(function(a,b) {
		if (a[sidx] < b[sidx]) {
			return sord == 'asc' ? +1 : -1;	
		}
		if (a[sidx] > b[sidx]) {
			return sord == 'asc' ? -1 : +1;
		}
		return 0;
	});
//	
	var result = {
		page: page,
		total: Math.ceil(arrCa.length / rows),
		records: arrCa.length,
		rows: arrCa.slice(rows * (page - 1), rows * page)
	};
	
	var response = Web.getHTTPResponse();
	response.setContentType('application/json; charset=utf-8');
	response.sendMessageBodyString(ImJson.toJSONString(result, false));
}

//according to action to execute method
function execAction(request) {
	var action = request == undefined ? "init" : request.action || "init";
	eval(action + "(request)");
}
